"""parse_inductor_ipex_log.py
Generate a report of abs data for review about IPEX vs Inductor.
Usage:
  python parse_inductor_ipex_log.py --mt multi_threads_model_bench_log_*.log --st single_thread_model_bench_log_*.log
  mt: multi_threads_model_bench_log
  st: single_thread_model_bench_log
  (generated by inductor_ipex_test.sh)
"""

import argparse
import pandas as pd
from pandas import ExcelWriter

parser = argparse.ArgumentParser(description='Inductor VS IPEX log parser')
parser.add_argument('--mt', type=str, default="multi threads inductor.log", help='log file')
parser.add_argument('--st', type=str, default="single thread inductor.log", help='log file')
args = parser.parse_args()

all_models = []
inductor_res_dict = {}
ipex_res_dict = {}

def str_to_dict(contents,res_dict):
    for line in contents:
        model = line.split(",")[0]
        eager = float(line.split(",")[1].strip().split(":")[-1])
        compiler = float(line.split(",")[2].strip().split(":")[-1])
        res_dict[model] = [eager, compiler]

def parse_log(file):
    result = []
    suite = []
    cnt = 0
    with open(file, 'r') as reader:
        contents = reader.readlines()
        model = ""
        for line in contents:
            if "Time cost" in line:
                model = line.split(" Time cost")[0].split(" ")[-1].strip()
                if model not in suite:
                    suite.append(model)
            elif line.startswith("eager: "):
                result.append(model+", "+ line)
            elif "cpu  eval" in line:
                m = line.split("cpu  eval")[-1].strip().split(" ")[0].strip()
                if m not in suite:
                    suite.append(m)
            elif line.startswith("compression_ratio"):
                cnt += 1
                suite.sort(key=str.lower)
                all_models.extend(suite)
                if cnt%2:
                    str_to_dict(result, ipex_res_dict)
                else:
                    str_to_dict(result, inductor_res_dict)
                result.clear()
                suite.clear()


def process_absolute_data(file):
    parse_log(file)
    results = ["name, Eager(inductor), Inductor, Eager(ipex), IPEX, Eager Ratio(inductor/ipex), Inductor/IPEX Ratio\n"]
    unique_models = []
    for item in all_models:
        if item not in unique_models:
            unique_models.append(item)

    for key in unique_models:
        line = key+", "
        if key in inductor_res_dict:
            for item in inductor_res_dict[key]:
                line += str(item) +", "
        else:
            line += "NA, NA, "
        if key in ipex_res_dict:
            for item in ipex_res_dict[key]:
                line += str(item) +", "
        else:
            line += "NA, NA, "
        if key in inductor_res_dict and key in ipex_res_dict:
            line+=str(round(inductor_res_dict[key][0]/ipex_res_dict[key][0], 2)) + ", "
            line+=str(round(inductor_res_dict[key][1]/ipex_res_dict[key][1], 2))
        else:
            line += "NA, NA, "
        line += "\n"
        results.append(line)
            
    r=pd.DataFrame(results)
    data=pd.DataFrame(r[0].str.split(', ',expand=True))
    return data

with ExcelWriter('Inductor Vs Ipex Check.xlsx') as writer:
    process_absolute_data(args.mt).to_excel(writer, sheet_name='MT ABS data', index=False,header=False,startrow=0, startcol=0)
    process_absolute_data(args.st).to_excel(writer, sheet_name='ST ABS data', index=False,header=False,startrow=0, startcol=0)